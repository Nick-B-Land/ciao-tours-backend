package com.sait.ciaoToursEMS.model;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * PayrollData class
 * This class is used to store the payroll data to a given payroll object
 */
@Entity
@Table(name = "payroll_data")
public class PayrollData {
    /**
     * PayrollData id (primary key)
     * This is the id of the payroll data
     * It is auto-incremented
     * It is generated by the database
     * It is not editable by the user
     */
    @Id
    @GeneratedValue
    @Column(name = "payroll_data_id")
    private long payrollDataId;

    /**
     * PayrollData payroll (foreign key)
     * This is the payroll object that the payroll data belongs to
     */
    @Column(name = "payroll_id")
    private long payrollId;

    /**
     * Payroll Event
     */
    @Column(name = "payroll_event")
    private int payrollEvent;

    /**
     * Date of the payroll data entry
     */
    @Column(name = "date_of_payroll_data")
    private  Date dateOfPayrollData;

    /**
     * Number of hours worked
     */
    @Column(name = "no_of_working_hours")
    private int noOfWorkingHours;

    /**
     * Number of hours off from a regular working day
     */
    @Column(name = "time_off")
    private  double timeOff;

    /**
     * Office usage description
     */
    @Column(name = "office_usage")
    private  String officeUsage;

    /**
     * Other usage description
     */
    @Column(name = "other_usage")
    private  String otherUsage;

    /**
     * fee of the office usage
     */
    @Column(name = "usage_cost")
    private float usageCost;

    /**
     * Daily assistance fee client name
     */
    @Column(name = "daily_assistance_client")
    private  String dailyAssistanceClient;

    /**
     * Daily assistance fee start date
     */
    @Column(name = "daily_assistance_start_date")
    private LocalDateTime dailyAssistanceStartDate;

    /**
     * Daily assistance fee end date
     */
    @Column(name = "daily_assistance_end_date")
    private LocalDateTime  dailyAssistanceEndDate;

    /**
     * Daily assistance fee
     */
    @Column(name = "daily_assistance_fee")
    private float dailyAssistanceFee ;

    /**
     * Tour booking description of event for booking admin
     */
    @Column(name = "tour_booking_admin_description")
    private String tourBookingAdminDescription;

    /**
     * Amount of hours worked for a tour booking
     */
    @Column(name = "tour_booking_num_of_hours")
    private int tourBookingNumOfHours;

    /**
     * Tour booking client name
     */
    @Column(name = "tour_booking_client")
    private String tourBookingClient;

    /**
     * Tour booking administration fee
     */
    @Column(name = "tour_booking_admin_fee")
    private float tourBookingAdminFee ;

    /**
     * Date of a recorded expense
     */
    @Column(name = "day_of_expense")
    private Date dayOfExpense ;

    /**
     * Description of the expense for review
     */
    @Column(name = "expense_description")
    private String expenseDescription ;

    /**
     * Amount of the expense
     */
    @Column(name = "expense_amount")
    private float expenseAmount;

    /**
     * Date of the expense
     */
    @Column(name = "expense_date")
    private Date expenseDate;

    /**
     * Default constructor
     */
    public PayrollData(){}

    /**
     * Constructor with parameters
     * @param payrollDataId id of the payroll data
     * @param payrollId id of the payroll
     * @param payrollEvent event of the payroll
     * @param dateOfPayrollData date of the payroll data
     * @param noOfWorkingHours number of hours worked
     * @param timeOff number of hours off
     * @param officeUsage office usage description
     * @param otherUsage other usage description
     * @param usageCost fee of the office usage
     * @param dailyAssistanceClient daily assistance client name
     * @param dailyAssistanceStartDate daily assistance start date
     * @param dailyAssistanceEndDate daily assistance end date
     * @param dailyAssistanceFee daily assistance fee
     * @param tourBookingAdminDescription tour booking description of event for booking admin
     * @param tourBookingNumOfHours amount of hours worked for a tour booking
     * @param tourBookingClient tour booking client name
     * @param tourBookingAdminFee tour booking administration fee
     * @param dayOfExpense date of a recorded expense
     * @param expenseDescription description of the expense for review
     * @param expenseAmount amount of the expense
     * @param expenseDate date of the expense
     */
    public PayrollData(long payrollDataId, long payrollId, int payrollEvent, Date dateOfPayrollData, int noOfWorkingHours,
                       double timeOff, String officeUsage, String otherUsage, float usageCost, String dailyAssistanceClient, LocalDateTime dailyAssistanceStartDate,
                       LocalDateTime dailyAssistanceEndDate, float dailyAssistanceFee, String tourBookingAdminDescription, int tourBookingNumOfHours, String tourBookingClient,
                       float tourBookingAdminFee, Date dayOfExpense, String expenseDescription, float expenseAmount, Date expenseDate){
        this.payrollDataId = payrollDataId;
        this.payrollId = payrollId;
        this.payrollEvent = payrollEvent;
        this.dateOfPayrollData = dateOfPayrollData;
        this.noOfWorkingHours = noOfWorkingHours;
        this.timeOff = timeOff;
        this.officeUsage = officeUsage;
        this.otherUsage = otherUsage;
        this.usageCost = usageCost;
        this.dailyAssistanceClient = dailyAssistanceClient;
        this.dailyAssistanceStartDate = dailyAssistanceStartDate;
        this.dailyAssistanceEndDate = dailyAssistanceEndDate;
        this.dailyAssistanceFee = dailyAssistanceFee;
        this.tourBookingAdminDescription = tourBookingAdminDescription;
        this.tourBookingNumOfHours = tourBookingNumOfHours;
        this.tourBookingClient = tourBookingClient;
        this.tourBookingAdminFee = tourBookingAdminFee;
        this.dayOfExpense = dayOfExpense;
        this.expenseDescription = expenseDescription;
        this.expenseAmount = expenseAmount;
        this.expenseDate = expenseDate;
    }

    /**
     * Getter for the id of the payroll data
     * @return id of the payroll data
     */
    public long getPayrollDataId() {
        return payrollDataId;
    }

    /**
     * Setter for the id of the payroll data
     * @param payrollDataId id of the payroll data
     */
    public void setPayrollDataId(long payrollDataId) {
        this.payrollDataId = payrollDataId;
    }

    /**
     * Getter for the id of the payroll
     * @return id of the payroll
     */
    public long getPayrollId() {
        return payrollId;
    }

    /**
     * Setter for the id of the payroll
     * @param payrollId id of the payroll
     */
    public void setPayrollId(long payrollId) {
        this.payrollId = payrollId;
    }

    /**
     * Getter for the event of the payroll
     * @return event of the payroll
     */
    public int getPayrollEvent() {
        return payrollEvent;
    }

    /**
     * Setter for the event of the payroll
     * @param payrollEvent event of the payroll
     */
    public void setPayrollEvent(int payrollEvent) {
        this.payrollEvent = payrollEvent;
    }

    /**
     * Getter for the date of the payroll data
     * @return date of the payroll data
     */
    public Date getDateOfPayrollData() {
        return dateOfPayrollData;
    }

    /**
     * Setter for the date of the payroll data
     * @param dateOfPayrollData date of the payroll data
     */
    public void setDateOfPayrollData(Date dateOfPayrollData) {
        this.dateOfPayrollData = dateOfPayrollData;
    }

    /**
     * Getter for the number of working hours
     * @return number of working hours
     */
    public int getNoOfWorkingHours() {
        return noOfWorkingHours;
    }

    /**
     * Setter for the number of working hours
     * @param noOfWorkingHours number of working hours
     */
    public void setNoOfWorkingHours(int noOfWorkingHours) {
        this.noOfWorkingHours = noOfWorkingHours;
    }

    /**
     * Getter for the time off
     * @return time off in hours
     */
    public double getTimeOff() {
        return timeOff;
    }

    /**
     * Setter for the time off
     * @param timeOff time off in hours
     */
    public void setTimeOff(double timeOff) {
        this.timeOff = timeOff;
    }

    /**
     * Getter for the office usage
     * @return office usage in hours
     */
    public String getOfficeUsage() {
        return officeUsage;
    }

    /**
     * Setter for the office usage
     * @param officeUsage office usage in hours
     */
    public void setOfficeUsage(String officeUsage) {
        this.officeUsage = officeUsage;
    }

    /**
     * Getter for the other usage
     * @return other usage in hours
     */
    public String getOtherUsage() {
        return otherUsage;
    }

    /**
     * Setter for the other usage
     * @param otherUsage other usage in hours
     */
    public void setOtherUsage(String otherUsage) {
        this.otherUsage = otherUsage;
    }

    /**
     * Getter for the usage cost
     * @return usage cost
     */
    public float getUsageCost() {
        return usageCost;
    }

    /**
     * Setter for the usage cost
     * @param usageCost usage cost
     */
    public void setUsageCost(float usageCost) {
        this.usageCost = usageCost;
    }

    /**
     * Getter for the daily assistance fee client name
     * @return daily assistance fee client name
     */
    public String getDailyAssistanceClient() {
        return dailyAssistanceClient;
    }

    /**
     * Setter for the daily assistance fee client name
     * @param dailyAssistanceClient daily assistance fee client name
     */
    public void setDailyAssistanceClient(String dailyAssistanceClient) {
        this.dailyAssistanceClient = dailyAssistanceClient;
    }

    /**
     * Getter for the daily assistance fee date and time
     * @return daily assistance fee date and time
     */
    public LocalDateTime getDailyAssistanceStartDate() {
        return dailyAssistanceStartDate;
    }

    /**
     * Setter for the daily assistance fee start date
     * @param dailyAssistanceStartDate daily assistance fee start date
     */
    public void setDailyAssistanceStartDate(LocalDateTime dailyAssistanceStartDate) {
        this.dailyAssistanceStartDate = dailyAssistanceStartDate;
    }

    /**
     * Getter for the daily assistance fee end date
     * @return daily assistance fee end date
     */
    public LocalDateTime getDailyAssistanceEndDate() {
        return dailyAssistanceEndDate;
    }

    /**
     * Setter for the daily assistance fee end date
     * @param dailyAssistanceEndDate daily assistance fee end date
     */
    public void setDailyAssistanceEndDate(LocalDateTime dailyAssistanceEndDate) {
        this.dailyAssistanceEndDate = dailyAssistanceEndDate;
    }

    /**
     * Getter for the daily assistance fee
     * @return daily assistance fee
     */
    public float getDailyAssistanceFee() {
        return dailyAssistanceFee;
    }

    /**
     * Setter for the daily assistance fee
     * @param dailyAssistanceFee daily assistance fee
     */
    public void setDailyAssistanceFee(float dailyAssistanceFee) {
        this.dailyAssistanceFee = dailyAssistanceFee;
    }

    /**
     * Getter for the tour booking description
     * @return tour booking description
     */
    public String getTourBookingAdminDescription() {
        return tourBookingAdminDescription;
    }

    /**
     * Setter for the tour booking description
     * @param tourBookingAdminDescription tour booking description
     */
    public void setTourBookingAdminDescription(String tourBookingAdminDescription) {
        this.tourBookingAdminDescription = tourBookingAdminDescription;
    }

    /**
     * Getter for the tour booking number of hours worked
     * @return tour booking number of hours worked
     */
    public int getTourBookingNumOfHours() {
        return tourBookingNumOfHours;
    }

    /**
     * Setter for the tour booking number of hours worked
     * @param tourBookingNumOfHours tour booking number of hours worked
     */
    public void setTourBookingNumOfHours(int tourBookingNumOfHours) {
        this.tourBookingNumOfHours = tourBookingNumOfHours;
    }

    /**
     * Getter for the tour booking client name
     * @return tour booking client name
     */
    public String getTourBookingClient() {
        return tourBookingClient;
    }

    /**
     * Setter for the tour booking client name
     * @param tourBookingClient tour booking client name
     */
    public void setTourBookingClient(String tourBookingClient) {
        this.tourBookingClient = tourBookingClient;
    }

    /**
     * Getter for the tour administration fee
     * @return tour administration fee
     */
    public float getTourBookingAdminFee() {
        return tourBookingAdminFee;
    }

    /**
     * Setter for the tour administration fee
     * @param tourBookingAdminFee tour administration fee
     */
    public void setTourBookingAdminFee(float tourBookingAdminFee) {
        this.tourBookingAdminFee = tourBookingAdminFee;
    }

    /**
     * Getter for the date of an expense
     * @return date of an expense
     */
    public Date getDayOfExpense() {
        return dayOfExpense;
    }

    /**
     * Setter for the date of an expense
     * @param dayOfExpense date of an expense
     */
    public void setDayOfExpense(Date dayOfExpense) {
        this.dayOfExpense = dayOfExpense;
    }

    /**
     * Getter for the expense description
     * @return expense description
     */
    public String getExpenseDescription() {
        return expenseDescription;
    }

    /**
     * Setter for the expense description
     * @param expenseDescription expense description
     */
    public void setExpenseDescription(String expenseDescription) {
        this.expenseDescription = expenseDescription;
    }

    /**
     * Getter for the expense amount
     * @return expense amount
     */
    public float getExpenseAmount() {
        return expenseAmount;
    }

    /**
     * Setter for the expense amount
     * @param expenseAmount expense amount
     */
    public void setExpenseAmount(float expenseAmount) {
        this.expenseAmount = expenseAmount;
    }

    /**
     * Getter for the expense date
     * @return expense date
     */
    public Date getExpenseDate() {
        return expenseDate;
    }

    /**
     * Setter for the expense date
     * @param expenseDate expense date
     */
    public void setExpenseDate(Date expenseDate) {
        this.expenseDate = expenseDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PayrollData)) return false;
        PayrollData that = (PayrollData) o;
        return getPayrollDataId() == that.getPayrollDataId() && getNoOfWorkingHours() == that.getNoOfWorkingHours() && Double.compare(that.getTimeOff(), getTimeOff()) == 0 && Float.compare(that.getUsageCost(), getUsageCost()) == 0 && Float.compare(that.getDailyAssistanceFee(), getDailyAssistanceFee()) == 0 && getTourBookingNumOfHours() == that.getTourBookingNumOfHours() && Float.compare(that.getTourBookingAdminFee(), getTourBookingAdminFee()) == 0 && Float.compare(that.getExpenseAmount(), getExpenseAmount()) == 0 && Objects.equals(getPayrollId(), that.getPayrollId()) && Objects.equals(getPayrollEvent(), that.getPayrollEvent()) && Objects.equals(getDateOfPayrollData(), that.getDateOfPayrollData()) && Objects.equals(getOfficeUsage(), that.getOfficeUsage()) && Objects.equals(getOtherUsage(), that.getOtherUsage()) && Objects.equals(getDailyAssistanceClient(), that.getDailyAssistanceClient()) && Objects.equals(getDailyAssistanceStartDate(), that.getDailyAssistanceStartDate()) && Objects.equals(getDailyAssistanceEndDate(), that.getDailyAssistanceEndDate()) && Objects.equals(getTourBookingAdminDescription(), that.getTourBookingAdminDescription()) && Objects.equals(getTourBookingClient(), that.getTourBookingClient()) && Objects.equals(getDayOfExpense(), that.getDayOfExpense()) && Objects.equals(getExpenseDescription(), that.getExpenseDescription()) && Objects.equals(getExpenseDate(), that.getExpenseDate());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPayrollDataId(), getPayrollId(), getPayrollEvent(), getDateOfPayrollData(), getNoOfWorkingHours(), getTimeOff(), getOfficeUsage(), getOtherUsage(), getUsageCost(), getDailyAssistanceClient(), getDailyAssistanceStartDate(), getDailyAssistanceEndDate(), getDailyAssistanceFee(), getTourBookingAdminDescription(), getTourBookingNumOfHours(), getTourBookingClient(), getTourBookingAdminFee(), getDayOfExpense(), getExpenseDescription(), getExpenseAmount(), getExpenseDate());
    }

    @Override
    public String toString() {
        return "payroll_data{" +
                "PayrollDataId=" + payrollDataId +
                ", payroll=" + payrollId +
                ", payrollEvent=" + payrollEvent +
                ", dateOfPayrollData=" + dateOfPayrollData +
                ", noOfWorkingHours=" + noOfWorkingHours +
                ", timeOff=" + timeOff +
                ", officeUsage='" + officeUsage + '\'' +
                ", otherUsage='" + otherUsage + '\'' +
                ", usageCost=" + usageCost +
                ", dailyAssistanceClient='" + dailyAssistanceClient + '\'' +
                ", dailyAssistanceStartDate=" + dailyAssistanceStartDate +
                ", dailyAssistanceEndDate=" + dailyAssistanceEndDate +
                ", dailyAssistanceFee=" + dailyAssistanceFee +
                ", tourBookingAdminDescription='" + tourBookingAdminDescription + '\'' +
                ", tourBookingNumOfHours=" + tourBookingNumOfHours +
                ", tourBookingClient='" + tourBookingClient + '\'' +
                ", tourBookingAdminFee=" + tourBookingAdminFee +
                ", dayOfExpense=" + dayOfExpense +
                ", expenseDescription='" + expenseDescription + '\'' +
                ", expenseAmount=" + expenseAmount +
                ", expenseDate=" + expenseDate +
                '}';
    }
}

